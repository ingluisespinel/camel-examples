<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring       http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- You could also define a traditional camel context here -->

	<bean id="poDataGenerator" class="com.lhespinel.camel.fuse.components.PoDataGenerator" />

    <camelContext xmlns="http://camel.apache.org/schema/spring">

        <route id="route-main-timer">
			<from uri="timer:mainTimer?period=5000"/>
			<to uri="bean:poDataGenerator?method=generateOrders" />
			<log message="Total Body Size (Orders): ${body.size}"/>
			<to uri="direct:processOrders" />
		</route>

		<route id="route-orders-splitter">
			<from uri="direct:processOrders"/>
			<split>
				<simple>${body}</simple>
				<log message="Order Id: ${body.id} with total ${body.total}"/>
				<to uri="direct:orderValidator" />
			</split>
			<log message="Split finished"/>
		</route>

		<route id="route-order-validator">
			<from uri="direct:orderValidator"/>
			<choice>
				<when>
				    <simple>${body.total} > 500.0</simple>
				    <log message="Order Id: ${body.id} greater than 500.0"/>
				    <to uri="direct:orderFilter" />
				</when>
				<otherwise>
				    <log message="Order Id: ${body.id} less than 500.0"/>
				</otherwise>
			</choice>
			<log message="Choice finished"/>
		</route>

		<route id="route-order-filter">
			<from uri="direct:orderFilter"/>
			<filter>
				<simple>${body.total} > 800.0</simple>
				<log message="Filtered OrderId ${body.id} with total ${body.total}"/>
				<stop/>
			</filter>
			<log message="Order ${body.id} passed the filter"/>
		</route>


    </camelContext>

</beans>
